# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose up migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: "3.7"

volumes:
  - ./private/:/app/private

x-config:
  &server_config
  build: ./
  depends_on:
    - db
    - redis


x-shared_environment: &server_environment
  LOG_LEVEL: ${LOG_LEVEL:-info}
  DATABASE_URL: "postgres://vapor_username:vapor_password@db/vapor_database"
  REDIS_URL: "redis://redis:6379"
  # APNS_KEY_PATH: ""
  # APNS_KEY_ID: ""
  # APNS_TEAM_ID: ""
  # APNS_ENVIRONMENT: "staging"
  # SENDGRID_API_KEY: ""
  # PUFFERY_STATISTICS_CHANNELS: ""

services:
  puffery:
    <<: *server_config
    restart: always
    expose:
      - 80
    environment:
      <<: *server_environment
    command:
      ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "80", "--auto-migrate"]

  puffery-queues:
    <<: *server_config
    restart: always
    environment:
      <<: *server_environment
    command: ["queues"]

  puffery-queues-scheduled:
    <<: *server_config
    restart: always
    environment:
      <<: *server_environment
    command: ["queues", "--scheduled"]

  inbound-middleware:
    image: docker.pkg.github.com/okomari/puffery-sendgrid-inbound-middleware/puffery-sendgrid-inbound-middleware:latest-nightly-13
    restart: always
    expose:
      - 3000
    depends_on:
      - puffery
    environment:
      PUFFERY_NOTIFY_ADDRESS: http://puffery/api/v1/notify-inbound-email

  db:
    image: postgres:12.1-alpine
    restart: always
    container_name: db
    volumes:
      - ./data/db:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: vapor_username
      POSTGRES_PASSWORD: vapor_password
      POSTGRES_DB: vapor_database

  redis:
    image: redis
    restart: always
    volumes:
      - ./data/redis:/data
    command: ["redis-server", "--appendonly", "yes"]
